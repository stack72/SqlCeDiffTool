<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SqlCeScripting</name>
    </assembly>
    <members>
        <member name="T:ErikEJ.SqlCeScripting.Generator">
            <summary>
            Class for generating scripts
            Use the GeneratedScript property to get the resulting script
            </summary>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.#ctor(ErikEJ.SqlCeScripting.IRepository,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErikEJ.SqlCeScripting.Generator"/> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="outFile">The out file.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableScript(System.String)">
            <summary>
            Generates the table script.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableData(System.String,System.Boolean)">
            <summary>
            Generates the table data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="saveImageFiles">if set to <c>true</c> [save image files].</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableContent(System.String,System.Boolean)">
            <summary>
            Generates the content of the table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="saveImageFiles">if set to <c>true</c> [save image files].</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableSelect(System.String)">
            <summary>
            Generates the table select statement.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableInsert(System.String)">
            <summary>
            Generates the table insert statement.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableInsert(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Generates the table insert.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="fields">The fields.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.ValidColumns(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates the columns.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableUpdate(System.String)">
            <summary>
            Generates the table update statement.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableDelete(System.String)">
            <summary>
            Generates the table delete statement.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableDrop(System.String)">
            <summary>
            Generates the table drop statement.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateSchemaGraph(System.String)">
            <summary>
            Generates the schema graph.
            </summary>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GeneratePrimaryKeys(System.String)">
            <summary>
            Generates the primary keys.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateForeignKeys(System.String)">
            <summary>
            Generates the foreign keys.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateIndex">
            <summary>
            Added at 18 September 2008, based on Todd Fulmino's comment on 28 August 2008, gosh it's almost a month man :P
            </summary>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateIndexScript(System.String,System.String)">
            <summary>
            Generates the index script.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateIndexDrop(System.String,System.String)">
            <summary>
            Generates the index drop statement.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateIndexStatistics(System.String,System.String)">
            <summary>
            Generates the index statistics.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateIndex(System.String)">
            <summary>
            Generates the index create statement.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.Generator.GenerateTableColumns(System.String)">
            <summary>
            Generates the table columns.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="P:ErikEJ.SqlCeScripting.Generator.GeneratedScript">
            <summary>
            Gets the generated script.
            </summary>
            <value>The generated script.</value>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.ServerDBRepository.GetIndexesFromTable(System.String)">
            <summary>
            Get the indexes for the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.ServerDBRepository.GetLastSuccessfulSyncTime(System.String)">
            <summary>
            Get the local Datetime for last sync
            </summary>
            <param name="publication"> Publication id: EEJx:Northwind:NwPubl</param>
            <returns></returns>
        </member>
        <member name="T:ErikEJ.SqlCeScripting.DBRepository">
            <summary>
            Implementation of the <see cref="T:ErikEJ.SqlCeScripting.IRepository"/> interface for SQL Server Compact 3.1/3.5
            </summary>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ErikEJ.SqlCeScripting.DBRepository"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetRowVersionOrdinal(System.String)">
            <summary>
            Gets the row version ordinal.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetRowCount(System.String)">
            <summary>
            Gets the row count.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.HasIdentityColumn(System.String)">
            <summary>
            Determines whether [has identity column] [the specified table name].
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>
            	<c>true</c> if [has identity column] [the specified table name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetAllTableNames">
            <summary>
            Gets all table names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetDatabaseInfo">
            <summary>
            Gets the database info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetColumnsFromTable">
            <summary>
            Gets the columns from table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetDataFromReader(System.String)">
            <summary>
            Gets the data from reader.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetDataFromTable(System.String,System.Collections.Generic.List{ErikEJ.SqlCeScripting.Column})">
            <summary>
            Gets the data from table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetAllPrimaryKeys">
            <summary>
            Gets the primary keys from table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetAllForeignKeys">
            <summary>
            Gets all foreign keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetAllForeignKeys(System.String)">
            <summary>
            Gets all foreign keys.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetIndexesFromTable(System.String)">
            <summary>
            Get the query based on http://msdn.microsoft.com/en-us/library/ms174156.aspx
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.RenameTable(System.String,System.String)">
            <summary>
            Renames the table.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.IsServer">
            <summary>
            Determines whether this instance is server.
            </summary>
            <returns>
            	<c>true</c> if this instance is server; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.ExecuteSql(System.String)">
            <summary>
            Executes the SQL.
            </summary>
            <param name="script">The script.</param>
            <returns></returns>
        </member>
        <member name="M:ErikEJ.SqlCeScripting.DBRepository.GetLastSuccessfulSyncTime(System.String)">
            <summary>
            Get the local Datetime for last sync
            </summary>
            <param name="publication"> Publication id: EEJx:Northwind:NwPubl</param>
            <returns></returns>
        </member>
    </members>
</doc>
